//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmsWebserviceSRC
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SmsWebserviceSRC.NewSmsWebserviceSoap")]
    public interface NewSmsWebserviceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendFromUrl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> SendFromUrlAsync(string username, string password, string message, string fromNumber, string toNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendPostUrl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> SendPostUrlAsync(string username, string password, string from, string to, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArraySendQeue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> ArraySendQeueAsync(string[] Messages, string[] Mobiles, string[] senderNumbers, string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArraySendQeueWithId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> ArraySendQeueWithIdAsync(System.Guid[] Ids, string[] Messages, string[] Mobiles, string[] senderNumbers, string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendQeue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> SendQeueAsync(string username, string password, string message, string fromNumber, string[] toNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Send", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<long[]> SendAsync(string username, string password, string message, string fromNumber, string[] toNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendWithCheckinId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<long[]> SendWithCheckinIdAsync(string username, string password, string[] message, string fromNumber, string[] toNumbers, long[] checkingMessageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getArrayMessageStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int[]> getArrayMessageStatusAsync(string username, string password, long[] id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArraySend", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<long[]> ArraySendAsync(string username, string password, string[] message, string fromNumber, string[] toNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendWithUdh", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<long[]> SendWithUdhAsync(string username, string password, string message, string fromNumber, string[] toNumbers, string[] Udh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserCredit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> GetUserCreditAsync(string Username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMessageStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int[]> GetMessageStatusAsync(string Username, string password, long[] MessageIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetQueueMessageStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int[]> GetQueueMessageStatusAsync(string Username, string password, string[] MessageIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckCredit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> CheckCreditAsync(string Username, string password, int SmsFaCount, int SmsEnCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTarrifOperator", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<double> GetTarrifOperatorAsync(string linenumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RecieveSMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<SmsWebserviceSRC.RecieveSMSResponseRecieveSMSResult> RecieveSMSAsync(string Username, string password, string phNo, string startdate, string enddate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RecieveSMSById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<SmsWebserviceSRC.RecieveSms[]> RecieveSMSByIdAsync(string Username, string password, string phNo, int Id);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUnreadMessgese", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<SmsWebserviceSRC.GetUnreadMessgeseResponse> GetUnreadMessgeseAsync(SmsWebserviceSRC.GetUnreadMessgeseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUnreadMessgeseWithUsername", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<SmsWebserviceSRC.RecieveSms[]> GetUnreadMessgeseWithUsernameAsync(string Username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Test", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TestAsync(string[] str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> CheckVersionAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckVersionNew", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> CheckVersionNewAsync(string username, string password);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class RecieveSMSResponseRecieveSMSResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class RecieveSms
    {
        
        private string rcvSmsTextField;
        
        private string rcvsmsKeyWordField;
        
        private string rcvSmsfromField;
        
        private string rcvSmsToField;
        
        private string rcvSmsInteredDateField;
        
        private string rcvSmsUDHField;
        
        private string rcvsmsCharSetField;
        
        private string rcvSmsSmsCField;
        
        private string rcvSmsStatusField;
        
        private string rcvSmsMessageIDField;
        
        private string rcvSmsRuleIDField;
        
        private string rcvSmsDeliveredTimeField;
        
        private bool rcvSmsReededField;
        
        private string usrIdField;
        
        private int recieveSMSIdField;
        
        private int operatorIdField;
        
        private System.DateTime recieveDateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string RcvSmsText
        {
            get
            {
                return this.rcvSmsTextField;
            }
            set
            {
                this.rcvSmsTextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string RcvsmsKeyWord
        {
            get
            {
                return this.rcvsmsKeyWordField;
            }
            set
            {
                this.rcvsmsKeyWordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string RcvSmsfrom
        {
            get
            {
                return this.rcvSmsfromField;
            }
            set
            {
                this.rcvSmsfromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string RcvSmsTo
        {
            get
            {
                return this.rcvSmsToField;
            }
            set
            {
                this.rcvSmsToField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string RcvSmsInteredDate
        {
            get
            {
                return this.rcvSmsInteredDateField;
            }
            set
            {
                this.rcvSmsInteredDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string RcvSmsUDH
        {
            get
            {
                return this.rcvSmsUDHField;
            }
            set
            {
                this.rcvSmsUDHField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string RcvsmsCharSet
        {
            get
            {
                return this.rcvsmsCharSetField;
            }
            set
            {
                this.rcvsmsCharSetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string rcvSmsSmsC
        {
            get
            {
                return this.rcvSmsSmsCField;
            }
            set
            {
                this.rcvSmsSmsCField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string RcvSmsStatus
        {
            get
            {
                return this.rcvSmsStatusField;
            }
            set
            {
                this.rcvSmsStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string RcvSmsMessageID
        {
            get
            {
                return this.rcvSmsMessageIDField;
            }
            set
            {
                this.rcvSmsMessageIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string RcvSmsRuleID
        {
            get
            {
                return this.rcvSmsRuleIDField;
            }
            set
            {
                this.rcvSmsRuleIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string RcvSmsDeliveredTime
        {
            get
            {
                return this.rcvSmsDeliveredTimeField;
            }
            set
            {
                this.rcvSmsDeliveredTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public bool RcvSmsReeded
        {
            get
            {
                return this.rcvSmsReededField;
            }
            set
            {
                this.rcvSmsReededField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string UsrId
        {
            get
            {
                return this.usrIdField;
            }
            set
            {
                this.usrIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public int RecieveSMSId
        {
            get
            {
                return this.recieveSMSIdField;
            }
            set
            {
                this.recieveSMSIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public int OperatorId
        {
            get
            {
                return this.operatorIdField;
            }
            set
            {
                this.operatorIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public System.DateTime RecieveDate
        {
            get
            {
                return this.recieveDateField;
            }
            set
            {
                this.recieveDateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUnreadMessgese", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUnreadMessgeseRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string toNumber;
        
        public GetUnreadMessgeseRequest()
        {
        }
        
        public GetUnreadMessgeseRequest(string Username, string password, string toNumber)
        {
            this.Username = Username;
            this.password = password;
            this.toNumber = toNumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUnreadMessgeseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUnreadMessgeseResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int GetUnreadMessgeseResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string[] messages;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string[] fromNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string[] recivedates;
        
        public GetUnreadMessgeseResponse()
        {
        }
        
        public GetUnreadMessgeseResponse(int GetUnreadMessgeseResult, string[] messages, string[] fromNumber, string[] recivedates)
        {
            this.GetUnreadMessgeseResult = GetUnreadMessgeseResult;
            this.messages = messages;
            this.fromNumber = fromNumber;
            this.recivedates = recivedates;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface NewSmsWebserviceSoapChannel : SmsWebserviceSRC.NewSmsWebserviceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class NewSmsWebserviceSoapClient : System.ServiceModel.ClientBase<SmsWebserviceSRC.NewSmsWebserviceSoap>, SmsWebserviceSRC.NewSmsWebserviceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public NewSmsWebserviceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(NewSmsWebserviceSoapClient.GetBindingForEndpoint(endpointConfiguration), NewSmsWebserviceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NewSmsWebserviceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(NewSmsWebserviceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NewSmsWebserviceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(NewSmsWebserviceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NewSmsWebserviceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string[]> SendFromUrlAsync(string username, string password, string message, string fromNumber, string toNumber)
        {
            return base.Channel.SendFromUrlAsync(username, password, message, fromNumber, toNumber);
        }
        
        public System.Threading.Tasks.Task<string[]> SendPostUrlAsync(string username, string password, string from, string to, string message)
        {
            return base.Channel.SendPostUrlAsync(username, password, from, to, message);
        }
        
        public System.Threading.Tasks.Task<string[]> ArraySendQeueAsync(string[] Messages, string[] Mobiles, string[] senderNumbers, string Username, string Password)
        {
            return base.Channel.ArraySendQeueAsync(Messages, Mobiles, senderNumbers, Username, Password);
        }
        
        public System.Threading.Tasks.Task<string[]> ArraySendQeueWithIdAsync(System.Guid[] Ids, string[] Messages, string[] Mobiles, string[] senderNumbers, string Username, string Password)
        {
            return base.Channel.ArraySendQeueWithIdAsync(Ids, Messages, Mobiles, senderNumbers, Username, Password);
        }
        
        public System.Threading.Tasks.Task<string[]> SendQeueAsync(string username, string password, string message, string fromNumber, string[] toNumbers)
        {
            return base.Channel.SendQeueAsync(username, password, message, fromNumber, toNumbers);
        }
        
        public System.Threading.Tasks.Task<long[]> SendAsync(string username, string password, string message, string fromNumber, string[] toNumbers)
        {
            return base.Channel.SendAsync(username, password, message, fromNumber, toNumbers);
        }
        
        public System.Threading.Tasks.Task<long[]> SendWithCheckinIdAsync(string username, string password, string[] message, string fromNumber, string[] toNumbers, long[] checkingMessageId)
        {
            return base.Channel.SendWithCheckinIdAsync(username, password, message, fromNumber, toNumbers, checkingMessageId);
        }
        
        public System.Threading.Tasks.Task<int[]> getArrayMessageStatusAsync(string username, string password, long[] id)
        {
            return base.Channel.getArrayMessageStatusAsync(username, password, id);
        }
        
        public System.Threading.Tasks.Task<long[]> ArraySendAsync(string username, string password, string[] message, string fromNumber, string[] toNumbers)
        {
            return base.Channel.ArraySendAsync(username, password, message, fromNumber, toNumbers);
        }
        
        public System.Threading.Tasks.Task<long[]> SendWithUdhAsync(string username, string password, string message, string fromNumber, string[] toNumbers, string[] Udh)
        {
            return base.Channel.SendWithUdhAsync(username, password, message, fromNumber, toNumbers, Udh);
        }
        
        public System.Threading.Tasks.Task<int> GetUserCreditAsync(string Username, string password)
        {
            return base.Channel.GetUserCreditAsync(Username, password);
        }
        
        public System.Threading.Tasks.Task<int[]> GetMessageStatusAsync(string Username, string password, long[] MessageIds)
        {
            return base.Channel.GetMessageStatusAsync(Username, password, MessageIds);
        }
        
        public System.Threading.Tasks.Task<int[]> GetQueueMessageStatusAsync(string Username, string password, string[] MessageIds)
        {
            return base.Channel.GetQueueMessageStatusAsync(Username, password, MessageIds);
        }
        
        public System.Threading.Tasks.Task<int> CheckCreditAsync(string Username, string password, int SmsFaCount, int SmsEnCount)
        {
            return base.Channel.CheckCreditAsync(Username, password, SmsFaCount, SmsEnCount);
        }
        
        public System.Threading.Tasks.Task<double> GetTarrifOperatorAsync(string linenumber)
        {
            return base.Channel.GetTarrifOperatorAsync(linenumber);
        }
        
        public System.Threading.Tasks.Task<SmsWebserviceSRC.RecieveSMSResponseRecieveSMSResult> RecieveSMSAsync(string Username, string password, string phNo, string startdate, string enddate)
        {
            return base.Channel.RecieveSMSAsync(Username, password, phNo, startdate, enddate);
        }
        
        public System.Threading.Tasks.Task<SmsWebserviceSRC.RecieveSms[]> RecieveSMSByIdAsync(string Username, string password, string phNo, int Id)
        {
            return base.Channel.RecieveSMSByIdAsync(Username, password, phNo, Id);
        }
        
        public System.Threading.Tasks.Task<SmsWebserviceSRC.GetUnreadMessgeseResponse> GetUnreadMessgeseAsync(SmsWebserviceSRC.GetUnreadMessgeseRequest request)
        {
            return base.Channel.GetUnreadMessgeseAsync(request);
        }
        
        public System.Threading.Tasks.Task<SmsWebserviceSRC.RecieveSms[]> GetUnreadMessgeseWithUsernameAsync(string Username, string password)
        {
            return base.Channel.GetUnreadMessgeseWithUsernameAsync(Username, password);
        }
        
        public System.Threading.Tasks.Task<string> TestAsync(string[] str)
        {
            return base.Channel.TestAsync(str);
        }
        
        public System.Threading.Tasks.Task<string[]> CheckVersionAsync(string username, string password)
        {
            return base.Channel.CheckVersionAsync(username, password);
        }
        
        public System.Threading.Tasks.Task<string[]> CheckVersionNewAsync(string username, string password)
        {
            return base.Channel.CheckVersionNewAsync(username, password);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NewSmsWebserviceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.NewSmsWebserviceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NewSmsWebserviceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://webservice.sahandsms.com/NewSmsWebservice.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.NewSmsWebserviceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://webservice.sahandsms.com/NewSmsWebservice.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            NewSmsWebserviceSoap,
            
            NewSmsWebserviceSoap12,
        }
    }
}
